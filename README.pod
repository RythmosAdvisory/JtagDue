
This is the source file from which the README file is generated.

This file is written in Perl's Plain Old Documentation (POD) format.
Run the following Perl commands to convert it to text or to HTML
for easy reading:

  pod2text README.pod >README.txt

  # pod2html seems buggy, at least in perl v5.10.1, therefore
  # I'm using this long one-liner instead (with bash):
  perl -MPod::Simple::HTML  -e "\$p = Pod::Simple::HTML->new; \$p->index( 1 ); \$p->output_fh( *STDOUT{IO} ); \$p->force_title('JtagDue'); \$p->parse_file('README.pod');"  >README.html

This file is best edited with emacs module pod-mode, available in CPAN.
However, the POD syntax is quite simple and can be edited with a standard text editor.

=pod

=head1 JtagDue Project

The main goal of this project is to provide an up-to-date, comfortable B<bare-metal C++
programming environment> for the Arduino Due and, in the future, for similar boards.

A secondary goal is to convert the Arduino Due into a B<JTAG adapter>
by emulating a I<Bus Pirate> from L<< Dangerous Prototypes|http://dangerousprototypes.com/ >> ,
so that it is compatible with L<< OpenOCD|http://openocd.sourceforge.net/ >> .

=head2 About the Bare Metal C++ Environment

The bare metal programming environment has the following features:

=over

=item * Event loop (super loop) architecture.

The developer must manually call every library function and has therefore full control at any point in time.

There are no OS background tasks or threads to worry about.

=item * C++ exceptions.

=item * Newlib with malloc support.

=item * Assertions.

=item * Debug console.

Some useful generic commands are available: memory usage, CPU load in the last 60 seconds, compiler version used to build, last reset cause, uptime display, etc.

=item * Library of common functions.

Most basic functions you need to get started have been implemented: Busy wait loop helpers, basic text parsing, I/O utilities, stack usage tools, uptime calculation, a template-based circular buffer implementation, etc.

=item * Start-up delay for easy JTAG debugging right after reset. This is useful for JTAG probes that do not support the RCLK signal (adaptive clock speed).

=item * Firmware cross-compiled with the standard GCC and autotools.

=back

=head2 About the JTAG Functionality

The Arduino Due has a faster USB port and a faster CPU, so it can easily outperform the Bus Pirate.

I made a quick test, and GDB's 'load' command reports a transfer rate of 24 KiB/s with the JtagDue firmware (release build)
when programming a second JtagDue board, compared to 8 KiB/s with the Bus Pirate. When programming an STM32429I-EVAL1 evaluation board,
which has an STM32F429 microcontroller, GDB reports 31 KiB/s compared to 24 KiB/s with its built-in SWD adapter,
and I have obtained rates of around 84 KiB/s with an Atmel AT91SAM9G20-EK board when writing to SDRAM instead of Flash.

Note that I had to manually patch OpenOCD 0.8.0 as of May 2013 in order
for setting "buspirate_speed fast" to work with the Bus Pirate board, otherwise you have to revert back to "buspirate_speed normal",
and then you get just 1 KiB/s when using the Bus Pirate as a JTAG adapter. If you modify OpenOCD in order to use bigger USB packets,
you can reach slightly higher speeds with the JtagDue.

There are some caveats when using the Arduino Due with the JtagDue firmware as a JTAG adapter:

=over

=item * The JTAG interface can only handle 3.3 V signals.

=item * There is no JTAG clock speed setting, just like the current Bus Pirate / OpenOCD combination (as of May 2013).

The JTAG clock always runs at maximum speed, which may be too fast for some devices.
I made some imprecise measurements, and the resulting TCK rate is around 3 MHz.
This means there is no JTAG adaptive clocking support either.

=item * The JTAG signals are driven by software and their timings are not clean.

For example, TCK does not stay 50 % of the time high.
The lowest-level JTAG bit shifting routine should be rewritten in assembly. Help in this area would be appreciated.

=item * The Arduino Due pull-ups are too weak to be of any use, see comments about setting 'buspirate_pullup' below.

=back

See this page for more information about my experience with the Arduino Due:
  L<< http://www.devtal.de/wiki/Benutzer:Rdiez/ArduinoDue >>

=head1 Empty Firmware Project

There is an "EmptyFirmware" directory that generates a dummy firmware which performs
minimal initialisation and then just waits forever. This project exists for the following reasons:

=over

=item 1) The project can serve as a starting point for other projects.

=item 2) With the empty firmware you can reliably stop the CPU over the JTAG interface.

That is the best way to measure OpenOCD and GDB transfer speeds or to stress-test the JTAG interface.

=item 3) You can use this project to perform code size experiments.

The empty firmware is very small and you can easily see how much code size isolated features
or components contribute to the final binary size.

You should get byte sizes similar to the following with an optimised build with asserts turned off:

  Code size:             14,204
  Initialised data size:  1,304
  BSS size:               2,160
  Total:                 17,668

The empty firmware prints some basic text to the serial port console with the size values above. It also has C++ exception support,
which automatically pulls in malloc() support from newlib.

For example, adding a call to sprintf() pulls in the corresponding formatting code from newlib and yields the following sizes:

  Code size:             23,300
  Initialised data size:  1,360
  BSS size:               2,160
  Total:                 26,820

That means an increase of 9,152 bytes the first time you touch a printf-style function.

=back

=head1 Installation Instructions

=head2 Installing a binary file

Pre-built binary files are available in a separate repository at L<< https://github.com/rdiez/JtagDueBinaries >> .
These binaries can be flashed with the standard Arduino Due tools. Jump straight to section "Flash the new firmware" below
in order to flash a pre-built binary file.

=head2 Building by hand

=over

=item 1) Build the toolchain.

Change to the 'Toolchain' subdirectory and type "make help" for more information.

=item 2) Download and unpack the Atmel Software Framework into some directory of your choice.

=item 3) Build the JtagDue firmware for the Arduino Due like most Autotools projects:

=over

=item a) Make sure the new toolchain's 'bin' subdirectory is in the PATH.

=item b) Run autogen.sh in the 'Project' subdirectory.

=item c) It is best to build out of the source tree like this:

  mkdir obj
  cd obj
  ../Project/configure --prefix=/some/bin/directory --with-atmel-software-framework=<directory where the ASF is>
  make  --no-builtin-rules  -j $(( $(getconf _NPROCESSORS_ONLN) + 1 ))
  make install

=back

=item 4) Flash the new firmware.

First of all, plug the USB cable into the Arduino Due's "programming" USB socket (as opposed to the "native" socket).

You will need the I<< Bossac >> tool in order to download the firmware into the Arduino Due.
The easiest way to get it is probably to install the official Arduino software environment.
Usage example for Linux:

  stty -F /dev/ttyACM0 1200 && bossac --port=ttyACM0 --force_usb_port=false --verify --write "filename.bin" --boot=1 --reset

Alternatively, you could use the Arduino Due's JTAG port to download the firmware with GDB,
but then you need some other JTAG adapter. I have used the Bus Pirate for that purpose.

=item 5) Test whether the new firmware is working properly.

Plug the USB cable into the Arduino Due's "native" USB socket (as opposed to the "programming" socket).

If you are running Windows, you will be prompted the first time to install a driver for the new device,
just point it to the "WindowsDriver" subdirectory. The .INF file in that subdirectory is actually just
a special text file that associates JtagDue's USB IDs to Windows' own USB CDC driver,
so that a standard "COMx" virtual serial port is automatically created upon connection.
Unfortunately, you cannot choose a fixed serial port number (the "x" in the name), so that
it will change from time to time depending on how many virtual serial ports currently exist
on the system.

Linux and Mac OS do no need any drivers. On linux, a new virtual serial port device
is automatically created with a name like "/dev/ttyACM0", just look for the right device name
under the "/dev" directory.

Now you should be able to connect to the virtual serial port with your favorite serial port console emulator.

For example, this Linux client allows you to conveniently quit the client-side terminal emulator
(the local 'socat' command) with Ctrl+C:

  socat READLINE,echo=0 /dev/ttyACM0,b115200,raw,echo=0

On Windows, you can use Putty like this:

  putty -serial COM8

The JtagDue firmware does not implement the usual command-line editing comfort features yet, like
command history and all the standard cursor key movements, but you can use the Readline library
on the client side instead as follows:

  # Without READLINE, but so that Ctrl+C still quits socat:
  socat -,echo=0,icanon=0 /dev/ttyACM0,b115200,raw,echo=0

Due to a protocol limitation, there is no welcome banner. Press the Enter key at least once
to see the cursor ('>'), or type "help" for a list of available commands.

=item 6) Create a Linux I<< udev >> rule in order to get the same "/dev/jtagdue1" name every time.

When you connect the Arduino Due to your Linux PC, you will get a new virtual serial port like
/dev/ttyACM0 or /dev/ttyACM1, depending on how many serial ports currently exist on the system.
If you wish to write your own scripts to automate JTAG tasks,
it is desirable that the assigned device name is always the same.

The JtagDue firmware uses the standard Arduino Due Vendor ID, but uses a Device ID of 0x1234
(you can change it when configuring the build). It also reports a serial number of "JtagDue1".
In order to get a fixed /dev/jtagdue1 device name,
create a new file called /etc/udev/rules.d/47-JtagDue.rules (as root) with the following content:

  SUBSYSTEM=="tty" ATTRS{idVendor}=="2341" ATTRS{idProduct}=="1234" ATTRS{serial}=="JtagDue1" MODE="0666" SYMLINK+="jtagdue1"

Theoretically, you can add a GROUP="some_group" option in order to restrict access to a particular user group,
but I could not make it work on my system.

The next time you plug the Arduino Due, if it is running the JtagDue firmware, an entry like /dev/ttyACM1
will still be created, but there will also be a /dev/jtagdue1 link pointing to the right one.
Restarting udev with "sudo restart udev" should not be necessary for the new rule file to be taken into account.

=item 7) Connect the JTAG pins to the target device.

You can see the JTAG signal pin numbers on the Arduino Due and their current state (as if they all were inputs)
with command "JtagPins". This is the kind of output generated:

  Input status of all JTAG pins:
  TDI   (pin 42): high  |  GND2  (pin 43): low
   -    (pin 44):  -    |  nTRST (pin 45): high
  TMS   (pin 46): high  |  nSRST (pin 47): high
  TDO   (pin 48): high  |  VCC   (pin 49): high
  TCK   (pin 50): high  |  GND1  (pin 51): low

That is the same pin layout as the 10-pin Altera USB Blaster connector, with some
Atmel additions from the AVR JTAG header. Pin 1 on the USB Blaster (TCK) corresponds
then to pin 50 on the Arduino Due.

With the command above you can also verify that at least the ground signals (GND1 and GND2)
are low and the VCC signal is high after connecting the JTAG cable.

In contrast to the Bus Pirate, the Arduino Due has no analog switch chip on board,
so the VCC, GND1 and GND2 signals are _not_ used as reference voltages when driving the JTAG interface.
You need to make sure beforehand that the voltage levels are the same on both the Arduino Due and
the JTAG target board.

=item 8) Connect to the JtagDue with OpenOCD.

You will need to disconnect the command console beforehand if you have it open.

Configure OpenOCD as if your JTAG adapter were a Bus Pirate, but bear in mind that:

=over

=item * Option 'buspirate_speed' has no effect, the USB transfer speed will always be the maximum available.

=item * Option 'buspirate_vreg' has no effect, as the Arduino Due has no voltage regulator to supply power to other devices.

=item * Option 'buspirate_pullup' only affects JTAG signals TDI, TDO, TCK and TMS, like in the Bus Pirate.

The reset signals TRST and SRST are not affected (have no pull-up option).

Note that the built-in pull-ups on the Atmel ATSAM3X8 are too weak (between 50 and 150 KOhm)
to be of any use. On my dodgy test set-up, and once looked at TCK with the oscilloscope,
and the rising edges were very long curves, the speed was not enough to run reliably
at as low as 24 KHz.

=item * If you set option 'buspirate_mode' to 'open-drain', JtagDue will use the Atmel ATSAM3X8's "Multi Drive Control" (Open Drain) mode.

Therefore, you need to enable the internal pull-ups (which are probably too weak, see above)
or have external ones in order to guarantee a high level on the lines when necessary.

=item * Command 'buspirate_led' has no effect.

The only LED on the Arduino Due is used as a heartbeat indicator at the moment.

=back

=back

=head1 Changelog

=over

=item * Version 1.0.0, released on 11 may 2013, git tag "v1.0.0". First public version.

=item * Version 1.1.2, released on 29 june 2014, git tag "v1.1.2". General improvement.

=back

=head1 Feedback

Please send feedback to rdiezmail-arduino at yahoo.de

The project's official web site is L<< https://github.com/rdiez/JtagDue >>

=head1 License

Copyright (C) R. Diez 2012,  rdiezmail-arduino at yahoo.de

The source code is released under the AGPL 3 license.

Please note that some of the files distributed with this project may have other authors and licenses.

This document is released under the Creative Commons Attribution-ShareAlike 3.0 Unported (CC BY-SA 3.0) license.

=cut
